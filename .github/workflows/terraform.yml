name: Terraform

on:
  push:
    branches:
      - main  # Run on pushes to the main branch

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    env:
      AWS_REGION: ap-south-1  # Set your AWS region here

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.2  # Update to a compatible Terraform version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}  # Use the environment variable for the region

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        if: "!contains(github.event.head_commit.message, 'destroy')"
        run: |
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: "contains(github.event.head_commit.message, 'destroy')"
        run: terraform destroy -auto-approve

      - name: Download Istio
        if: "!contains(github.event.head_commit.message, 'destroy')"
        run: |
          curl -L https://istio.io/downloadIstio | sh -
          ISTIO_VERSION=$(ls -d istio-*)
          echo "ISTIO_VERSION=$ISTIO_VERSION" >> $GITHUB_ENV
          echo "PATH=$PATH:$(pwd)/$ISTIO_VERSION/bin" >> $GITHUB_ENV

      - name: Verify Istio Installation
        if: "!contains(github.event.head_commit.message, 'destroy')"
        run: |
          source $GITHUB_ENV
          echo "PATH=$PATH"
          istioctl x precheck

      - name: Install Istio
        if: "!contains(github.event.head_commit.message, 'destroy')"
        run: |
          source $GITHUB_ENV
          istioctl install --set profile=demo -y

      - name: Apply Kubernetes manifests
        if: "!contains(github.event.head_commit.message, 'destroy')"
        run: |
          source $GITHUB_ENV
          kubectl apply -f istio-ingressgateway.yaml
          kubectl apply -f virtual-service.yaml
          kubectl apply -f frontend-deployment.yaml

      - name: Apply ALB Ingress Controller
        if: "!contains(github.event.head_commit.message, 'destroy')"
        run: |
          source $GITHUB_ENV
          kubectl apply -f alb-ingress-controller.yaml
